{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n// src/services/apiService.js\nimport { useAuth } from '@/store/auth.js';\nconst API_BASE_URL = 'http://localhost:8080'; // <-- 改成你的后端地址\n\n// 通用 API 请求\nexport async function apiFetch(endpoint, options = {}) {\n  const {\n    token\n  } = useAuth();\n  const headers = new Headers({\n    'Content-Type': 'application/json',\n    ...options.headers\n  });\n\n  // 自动附加认证头\n  if (token.value) {\n    headers.append('Authorization', `Bearer ${token.value}`);\n  }\n  try {\n    const response = await fetch(API_BASE_URL + endpoint, {\n      ...options,\n      headers\n    });\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.msg || '请求失败');\n    }\n    return data; // 返回完整的 Result 对象\n  } catch (error) {\n    console.error('API Fetch Error:', error);\n    throw error;\n  }\n}\n\n// 特殊的登录请求\nexport async function login(username, password) {\n  const body = new URLSearchParams();\n  body.append('username', username);\n  body.append('password', password);\n  try {\n    // LoginController 需要 'x-www-form-urlencoded'\n    const response = await fetch(API_BASE_URL + '/login', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body: body\n    });\n    const data = await response.json();\n    if (!response.ok || data.code !== 1) {\n      // 检查 Result 对象的 code\n      throw new Error(data.msg || '登录失败');\n    }\n    return data; // 返回成功的 Result，其 data 字段为 token\n  } catch (error) {\n    console.error('Login Error:', error);\n    throw error;\n  }\n}","map":{"version":3,"names":["useAuth","API_BASE_URL","apiFetch","endpoint","options","token","headers","Headers","value","append","response","fetch","data","json","ok","Error","msg","error","console","login","username","password","body","URLSearchParams","method","code"],"sources":["G:/vue-project/jotang-frontend/src/services/apiService.js"],"sourcesContent":["// src/services/apiService.js\r\nimport { useAuth } from '@/store/auth.js'\r\n\r\nconst API_BASE_URL = 'http://localhost:8080' // <-- 改成你的后端地址\r\n\r\n// 通用 API 请求\r\nexport async function apiFetch(endpoint, options = {}) {\r\n    const { token } = useAuth()\r\n    const headers = new Headers({\r\n        'Content-Type': 'application/json',\r\n        ...options.headers,\r\n    })\r\n\r\n    // 自动附加认证头\r\n    if (token.value) {\r\n        headers.append('Authorization', `Bearer ${token.value}`)\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(API_BASE_URL + endpoint, { ...options, headers })\r\n        const data = await response.json()\r\n        if (!response.ok) {\r\n            throw new Error(data.msg || '请求失败')\r\n        }\r\n        return data // 返回完整的 Result 对象\r\n    } catch (error) {\r\n        console.error('API Fetch Error:', error)\r\n        throw error\r\n    }\r\n}\r\n\r\n// 特殊的登录请求\r\nexport async function login(username, password) {\r\n    const body = new URLSearchParams()\r\n    body.append('username', username)\r\n    body.append('password', password)\r\n\r\n    try {\r\n        // LoginController 需要 'x-www-form-urlencoded'\r\n        const response = await fetch(API_BASE_URL + '/login', {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\r\n            body: body,\r\n        })\r\n        const data = await response.json()\r\n        if (!response.ok || data.code !== 1) { // 检查 Result 对象的 code\r\n            throw new Error(data.msg || '登录失败')\r\n        }\r\n        return data // 返回成功的 Result，其 data 字段为 token\r\n    } catch (error) {\r\n        console.error('Login Error:', error)\r\n        throw error\r\n    }\r\n}"],"mappings":";;;AAAA;AACA,SAASA,OAAO,QAAQ,iBAAiB;AAEzC,MAAMC,YAAY,GAAG,uBAAuB,EAAC;;AAE7C;AACA,OAAO,eAAeC,QAAQA,CAACC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACnD,MAAM;IAAEC;EAAM,CAAC,GAAGL,OAAO,CAAC,CAAC;EAC3B,MAAMM,OAAO,GAAG,IAAIC,OAAO,CAAC;IACxB,cAAc,EAAE,kBAAkB;IAClC,GAAGH,OAAO,CAACE;EACf,CAAC,CAAC;;EAEF;EACA,IAAID,KAAK,CAACG,KAAK,EAAE;IACbF,OAAO,CAACG,MAAM,CAAC,eAAe,EAAE,UAAUJ,KAAK,CAACG,KAAK,EAAE,CAAC;EAC5D;EAEA,IAAI;IACA,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAACV,YAAY,GAAGE,QAAQ,EAAE;MAAE,GAAGC,OAAO;MAAEE;IAAQ,CAAC,CAAC;IAC9E,MAAMM,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;MACd,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,GAAG,IAAI,MAAM,CAAC;IACvC;IACA,OAAOJ,IAAI,EAAC;EAChB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IACxC,MAAMA,KAAK;EACf;AACJ;;AAEA;AACA,OAAO,eAAeE,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;EAC5C,MAAMC,IAAI,GAAG,IAAIC,eAAe,CAAC,CAAC;EAClCD,IAAI,CAACb,MAAM,CAAC,UAAU,EAAEW,QAAQ,CAAC;EACjCE,IAAI,CAACb,MAAM,CAAC,UAAU,EAAEY,QAAQ,CAAC;EAEjC,IAAI;IACA;IACA,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAACV,YAAY,GAAG,QAAQ,EAAE;MAClDuB,MAAM,EAAE,MAAM;MACdlB,OAAO,EAAE;QAAE,cAAc,EAAE;MAAoC,CAAC;MAChEgB,IAAI,EAAEA;IACV,CAAC,CAAC;IACF,MAAMV,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IAClC,IAAI,CAACH,QAAQ,CAACI,EAAE,IAAIF,IAAI,CAACa,IAAI,KAAK,CAAC,EAAE;MAAE;MACnC,MAAM,IAAIV,KAAK,CAACH,IAAI,CAACI,GAAG,IAAI,MAAM,CAAC;IACvC;IACA,OAAOJ,IAAI,EAAC;EAChB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;IACpC,MAAMA,KAAK;EACf;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}