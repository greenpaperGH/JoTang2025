{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, toDisplayString as _toDisplayString, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  key: 0\n};\nconst _hoisted_4 = {\n  type: \"submit\"\n};\nconst _hoisted_5 = {\n  key: 1,\n  style: {\n    \"color\": \"red\"\n  }\n};\nimport { ref, reactive, onMounted, computed } from 'vue';\nimport { useRouter } from 'vue-router';\nimport apiClient from '@/services/apiClient';\n\n// 从路由获取 props (在 router/index.js 中定义了 props: true)\n\nexport default {\n  __name: 'ProductForm',\n  props: {\n    id: {\n      type: String,\n      default: null\n    }\n  },\n  setup(__props) {\n    const props = __props;\n    const router = useRouter();\n    const product = reactive({\n      id: null,\n      title: '',\n      description: '',\n      type: '',\n      price: 0.0,\n      status: 'available',\n      publisherId: null\n    });\n    const error = ref(null);\n\n    // 计算属性，判断当前是编辑模式还是新建模式\n    const isEditMode = computed(() => !!props.id);\n\n    // (GET /products/{id})\n    const loadProductData = async () => {\n      if (!isEditMode.value) return; // 如果是新建模式，则跳过加载\n      try {\n        const result = await apiClient(`/products/${props.id}`, 'GET');\n        if (result.code === 1) {\n          // 将获取到的数据填充到表单\n          Object.assign(product, result.data);\n        } else {\n          error.value = result.msg;\n        }\n      } catch (err) {\n        error.value = err.message;\n      }\n    };\n\n    // 提交表单 (POST /products 或 PUT /products)\n    const handleSubmit = async () => {\n      error.value = null;\n      try {\n        let result;\n        if (isEditMode.value) {\n          // 更新 (PUT)\n          result = await apiClient('/products', 'PUT', product);\n        } else {\n          // 创建 (POST)\n          result = await apiClient('/products', 'POST', product);\n        }\n        if (result.code === 1) {\n          router.push({\n            name: 'ProductList'\n          }); // 成功后返回列表页\n        } else {\n          error.value = result.msg;\n        }\n      } catch (err) {\n        error.value = err.message;\n      }\n    };\n\n    // 组件挂载时，如果是编辑模式，则加载商品数据\n    onMounted(loadProductData);\n    return (_ctx, _cache) => {\n      return _openBlock(), _createElementBlock(\"div\", null, [isEditMode.value ? (_openBlock(), _createElementBlock(\"h2\", _hoisted_1, \"编辑商品\")) : (_openBlock(), _createElementBlock(\"h2\", _hoisted_2, \"添加新商品\")), _createElementVNode(\"form\", {\n        onSubmit: _withModifiers(handleSubmit, [\"prevent\"])\n      }, [_createElementVNode(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n        for: \"title\"\n      }, \"标题:\", -1)), _withDirectives(_createElementVNode(\"input\", {\n        type: \"text\",\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => product.title = $event),\n        id: \"title\",\n        required: \"\"\n      }, null, 512), [[_vModelText, product.title]])]), _createElementVNode(\"div\", null, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n        for: \"description\"\n      }, \"描述:\", -1)), _withDirectives(_createElementVNode(\"textarea\", {\n        \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => product.description = $event),\n        id: \"description\"\n      }, null, 512), [[_vModelText, product.description]])]), _createElementVNode(\"div\", null, [_cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n        for: \"type\"\n      }, \"类型:\", -1)), _withDirectives(_createElementVNode(\"input\", {\n        type: \"text\",\n        \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => product.type = $event),\n        id: \"type\",\n        required: \"\"\n      }, null, 512), [[_vModelText, product.type]])]), _createElementVNode(\"div\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"label\", {\n        for: \"price\"\n      }, \"价格:\", -1)), _withDirectives(_createElementVNode(\"input\", {\n        type: \"number\",\n        step: \"0.01\",\n        \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => product.price = $event),\n        id: \"price\",\n        required: \"\"\n      }, null, 512), [[_vModelText, product.price, void 0, {\n        number: true\n      }]])]), _createElementVNode(\"div\", null, [_cache[10] || (_cache[10] = _createElementVNode(\"label\", {\n        for: \"status\"\n      }, \"状态:\", -1)), _withDirectives(_createElementVNode(\"input\", {\n        type: \"text\",\n        \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => product.status = $event),\n        id: \"status\",\n        required: \"\"\n      }, null, 512), [[_vModelText, product.status]])]), !isEditMode.value ? (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_cache[11] || (_cache[11] = _createElementVNode(\"label\", {\n        for: \"publisherId\"\n      }, \"发布者 ID:\", -1)), _withDirectives(_createElementVNode(\"input\", {\n        type: \"number\",\n        \"onUpdate:modelValue\": _cache[5] || (_cache[5] = $event => product.publisherId = $event),\n        id: \"publisherId\",\n        required: \"\"\n      }, null, 512), [[_vModelText, product.publisherId, void 0, {\n        number: true\n      }]])])) : _createCommentVNode(\"\", true), _createElementVNode(\"button\", _hoisted_4, _toDisplayString(isEditMode.value ? '更新' : '创建'), 1), error.value ? (_openBlock(), _createElementBlock(\"p\", _hoisted_5, _toDisplayString(error.value), 1)) : _createCommentVNode(\"\", true)], 32)]);\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","useRouter","apiClient","props","__props","router","product","id","title","description","type","price","status","publisherId","error","isEditMode","loadProductData","value","result","code","Object","assign","data","msg","err","message","handleSubmit","push","name","_createElementBlock","_hoisted_1","_hoisted_2","_createElementVNode","onSubmit","_withModifiers","for","$event","required","step","number","_hoisted_3","_hoisted_4","_toDisplayString","_hoisted_5"],"sources":["G:/vue-project/jotang-frontend/src/views/ProductForm.vue","G:\\vue-project\\jotang-frontend\\src\\views\\ProductForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2 v-if=\"isEditMode\">编辑商品</h2>\r\n    <h2 v-else>添加新商品</h2>\r\n    \r\n    <form @submit.prevent=\"handleSubmit\">\r\n      <div>\r\n        <label for=\"title\">标题:</label>\r\n        <input type=\"text\" v-model=\"product.title\" id=\"title\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"description\">描述:</label>\r\n        <textarea v-model=\"product.description\" id=\"description\"></textarea>\r\n      </div>\r\n      <div>\r\n        <label for=\"type\">类型:</label>\r\n        <input type=\"text\" v-model=\"product.type\" id=\"type\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"price\">价格:</label>\r\n        <input type=\"number\" step=\"0.01\" v-model.number=\"product.price\" id=\"price\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"status\">状态:</label>\r\n        <input type=\"text\" v-model=\"product.status\" id=\"status\" required>\r\n      </div>\r\n      <div v-if=\"!isEditMode\">\r\n        <label for=\"publisherId\">发布者 ID:</label>\r\n        <input type=\"number\" v-model.number=\"product.publisherId\" id=\"publisherId\" required>\r\n      </div>\r\n      \r\n      <button type=\"submit\">{{ isEditMode ? '更新' : '创建' }}</button>\r\n      <p v-if=\"error\" style=\"color: red;\">{{ error }}</p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, computed, defineProps } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport apiClient from '@/services/apiClient';\r\n\r\n// 从路由获取 props (在 router/index.js 中定义了 props: true)\r\nconst props = defineProps({\r\n  id: {\r\n    type: String,\r\n    default: null\r\n  }\r\n});\r\n\r\nconst router = useRouter();\r\nconst product = reactive({\r\n  id: null,\r\n  title: '',\r\n  description: '',\r\n  type: '',\r\n  price: 0.0,\r\n  status: 'available',\r\n  publisherId: null \r\n});\r\nconst error = ref(null);\r\n\r\n// 计算属性，判断当前是编辑模式还是新建模式\r\nconst isEditMode = computed(() => !!props.id);\r\n\r\n// (GET /products/{id})\r\nconst loadProductData = async () => {\r\n  if (!isEditMode.value) return; // 如果是新建模式，则跳过加载\r\n  try {\r\n    const result = await apiClient(`/products/${props.id}`, 'GET');\r\n    if (result.code === 1) {\r\n      // 将获取到的数据填充到表单\r\n      Object.assign(product, result.data);\r\n    } else {\r\n      error.value = result.msg;\r\n    }\r\n  } catch (err) {\r\n    error.value = err.message;\r\n  }\r\n};\r\n\r\n// 提交表单 (POST /products 或 PUT /products)\r\nconst handleSubmit = async () => {\r\n  error.value = null;\r\n  try {\r\n    let result;\r\n    if (isEditMode.value) {\r\n      // 更新 (PUT)\r\n      result = await apiClient('/products', 'PUT', product);\r\n    } else {\r\n      // 创建 (POST)\r\n      result = await apiClient('/products', 'POST', product);\r\n    }\r\n\r\n    if (result.code === 1) {\r\n      router.push({ name: 'ProductList' }); // 成功后返回列表页\r\n    } else {\r\n      error.value = result.msg;\r\n    }\r\n  } catch (err) {\r\n    error.value = err.message;\r\n  }\r\n};\r\n\r\n// 组件挂载时，如果是编辑模式，则加载商品数据\r\nonMounted(loadProductData);\r\n</script>","<template>\r\n  <div>\r\n    <h2 v-if=\"isEditMode\">编辑商品</h2>\r\n    <h2 v-else>添加新商品</h2>\r\n    \r\n    <form @submit.prevent=\"handleSubmit\">\r\n      <div>\r\n        <label for=\"title\">标题:</label>\r\n        <input type=\"text\" v-model=\"product.title\" id=\"title\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"description\">描述:</label>\r\n        <textarea v-model=\"product.description\" id=\"description\"></textarea>\r\n      </div>\r\n      <div>\r\n        <label for=\"type\">类型:</label>\r\n        <input type=\"text\" v-model=\"product.type\" id=\"type\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"price\">价格:</label>\r\n        <input type=\"number\" step=\"0.01\" v-model.number=\"product.price\" id=\"price\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"status\">状态:</label>\r\n        <input type=\"text\" v-model=\"product.status\" id=\"status\" required>\r\n      </div>\r\n      <div v-if=\"!isEditMode\">\r\n        <label for=\"publisherId\">发布者 ID:</label>\r\n        <input type=\"number\" v-model.number=\"product.publisherId\" id=\"publisherId\" required>\r\n      </div>\r\n      \r\n      <button type=\"submit\">{{ isEditMode ? '更新' : '创建' }}</button>\r\n      <p v-if=\"error\" style=\"color: red;\">{{ error }}</p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, computed, defineProps } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport apiClient from '@/services/apiClient';\r\n\r\n// 从路由获取 props (在 router/index.js 中定义了 props: true)\r\nconst props = defineProps({\r\n  id: {\r\n    type: String,\r\n    default: null\r\n  }\r\n});\r\n\r\nconst router = useRouter();\r\nconst product = reactive({\r\n  id: null,\r\n  title: '',\r\n  description: '',\r\n  type: '',\r\n  price: 0.0,\r\n  status: 'available',\r\n  publisherId: null \r\n});\r\nconst error = ref(null);\r\n\r\n// 计算属性，判断当前是编辑模式还是新建模式\r\nconst isEditMode = computed(() => !!props.id);\r\n\r\n// (GET /products/{id})\r\nconst loadProductData = async () => {\r\n  if (!isEditMode.value) return; // 如果是新建模式，则跳过加载\r\n  try {\r\n    const result = await apiClient(`/products/${props.id}`, 'GET');\r\n    if (result.code === 1) {\r\n      // 将获取到的数据填充到表单\r\n      Object.assign(product, result.data);\r\n    } else {\r\n      error.value = result.msg;\r\n    }\r\n  } catch (err) {\r\n    error.value = err.message;\r\n  }\r\n};\r\n\r\n// 提交表单 (POST /products 或 PUT /products)\r\nconst handleSubmit = async () => {\r\n  error.value = null;\r\n  try {\r\n    let result;\r\n    if (isEditMode.value) {\r\n      // 更新 (PUT)\r\n      result = await apiClient('/products', 'PUT', product);\r\n    } else {\r\n      // 创建 (POST)\r\n      result = await apiClient('/products', 'POST', product);\r\n    }\r\n\r\n    if (result.code === 1) {\r\n      router.push({ name: 'ProductList' }); // 成功后返回列表页\r\n    } else {\r\n      error.value = result.msg;\r\n    }\r\n  } catch (err) {\r\n    error.value = err.message;\r\n  }\r\n};\r\n\r\n// 组件挂载时，如果是编辑模式，则加载商品数据\r\nonMounted(loadProductData);\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}