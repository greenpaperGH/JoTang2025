{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// src/services/api.js\nimport axios from 'axios';\nimport router from '../router'; // 引入 router\n\n// 假设您的 Spring Boot 后端运行在 8080 端口\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:8080',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器：在每个请求头中附带 Token\napiClient.interceptors.request.use(config => {\n  const token = localStorage.getItem('jwt-token');\n  if (token) {\n    // 注意：这里假设后端需要 'Bearer ' 前缀\n    // 如果您的 JwtUtils 过滤器不需要，请直接设置 config.headers.Authorization = token;\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// (可选) 响应拦截器：处理 401 未授权等错误\napiClient.interceptors.response.use(response => response, error => {\n  if (error.response && error.response.status === 401) {\n    // Token 过期或无效\n    localStorage.removeItem('jwt-token');\n    // 跳转到登录页\n    router.push('/login');\n  }\n  return Promise.reject(error);\n});\nexport default apiClient;","map":{"version":3,"names":["axios","router","apiClient","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","status","removeItem","push"],"sources":["G:/vue-project/jotang-frontend/src/services/api.js"],"sourcesContent":["// src/services/api.js\r\nimport axios from 'axios';\r\nimport router from '../router'; // 引入 router\r\n\r\n// 假设您的 Spring Boot 后端运行在 8080 端口\r\nconst apiClient = axios.create({\r\n  baseURL: 'http://localhost:8080',\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// 请求拦截器：在每个请求头中附带 Token\r\napiClient.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('jwt-token');\r\n    if (token) {\r\n      // 注意：这里假设后端需要 'Bearer ' 前缀\r\n      // 如果您的 JwtUtils 过滤器不需要，请直接设置 config.headers.Authorization = token;\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// (可选) 响应拦截器：处理 401 未授权等错误\r\napiClient.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response && error.response.status === 401) {\r\n      // Token 过期或无效\r\n      localStorage.removeItem('jwt-token');\r\n      // 跳转到登录页\r\n      router.push('/login');\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nexport default apiClient;"],"mappings":";AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW,CAAC,CAAC;;AAEhC;AACA,MAAMC,SAAS,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC7BC,OAAO,EAAE,uBAAuB;EAChCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,SAAS,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC/BC,MAAM,IAAK;EACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC/C,IAAIF,KAAK,EAAE;IACT;IACA;IACAD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACAK,KAAK,IAAK;EACT,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAZ,SAAS,CAACI,YAAY,CAACW,QAAQ,CAACT,GAAG,CAChCS,QAAQ,IAAKA,QAAQ,EACrBH,KAAK,IAAK;EACT,IAAIA,KAAK,CAACG,QAAQ,IAAIH,KAAK,CAACG,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;IACnD;IACAP,YAAY,CAACQ,UAAU,CAAC,WAAW,CAAC;IACpC;IACAlB,MAAM,CAACmB,IAAI,CAAC,QAAQ,CAAC;EACvB;EACA,OAAOL,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAeZ,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}