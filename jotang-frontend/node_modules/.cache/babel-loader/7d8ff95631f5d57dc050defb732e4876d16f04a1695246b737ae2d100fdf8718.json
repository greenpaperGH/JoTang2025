{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\n// src/services/apiClient.js\nimport { useAuth } from '@/utils/auth';\n\n// 假设您的后端运行在此地址\nconst BASE_URL = 'http://localhost:8080';\n\n/**\r\n * 封装的 fetch 客户端\r\n * @param {string} endpoint API 路径 (例如 /products)\r\n * @param {string} method HTTP 方法 (GET, POST, PUT, DELETE)\r\n * @param {object | null} data 要发送的数据 (用于 POST/PUT)\r\n * @returns {Promise<object>} 返回后端 Result 对象的 data 字段\r\n */\nasync function apiClient(endpoint, method = 'GET', data = null) {\n  const {\n    getToken\n  } = useAuth();\n  const token = getToken();\n  const config = {\n    method: method,\n    headers: {\n      // 默认设置为 JSON\n      'Content-Type': 'application/json'\n    }\n  };\n\n  // **按照您的要求，将 JWT 添加到 'token' 头**\n  if (token) {\n    config.headers['token'] = token;\n  }\n  if (data) {\n    // 特例：LoginController 需要 x-www-form-urlencoded\n    if (method === 'POST' && endpoint === '/login') {\n      config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n      // 将 {username: 'a', password: 'b'} 转换为 \"username=a&password=b\"\n      config.body = new URLSearchParams(data).toString();\n    }\n    // 其他 POST/PUT 请求使用 JSON\n    else if (method === 'POST' || method === 'PUT') {\n      config.body = JSON.stringify(data);\n    }\n  }\n  try {\n    const response = await fetch(`${BASE_URL}${endpoint}`, config);\n\n    // 解析后端的 Result 对象\n    const responseData = await response.json();\n\n    // 检查后端的业务逻辑是否成功\n    if (!response.ok || responseData.code === 0) {\n      throw new Error(responseData.msg || 'API 请求失败');\n    }\n\n    // 返回完整的 Result 对象\n    return responseData;\n  } catch (error) {\n    console.error('API Client Error:', error);\n    // 将错误抛出，以便组件可以捕获它\n    throw error;\n  }\n}\nexport default apiClient;","map":{"version":3,"names":["useAuth","BASE_URL","apiClient","endpoint","method","data","getToken","token","config","headers","body","URLSearchParams","toString","JSON","stringify","response","fetch","responseData","json","ok","code","Error","msg","error","console"],"sources":["G:/vue-project/jotang-frontend/src/services/apiClient.js"],"sourcesContent":["// src/services/apiClient.js\r\nimport { useAuth } from '@/utils/auth';\r\n\r\n// 假设您的后端运行在此地址\r\nconst BASE_URL = 'http://localhost:8080';\r\n\r\n/**\r\n * 封装的 fetch 客户端\r\n * @param {string} endpoint API 路径 (例如 /products)\r\n * @param {string} method HTTP 方法 (GET, POST, PUT, DELETE)\r\n * @param {object | null} data 要发送的数据 (用于 POST/PUT)\r\n * @returns {Promise<object>} 返回后端 Result 对象的 data 字段\r\n */\r\nasync function apiClient(endpoint, method = 'GET', data = null) {\r\n    const { getToken } = useAuth();\r\n    const token = getToken();\r\n\r\n    const config = {\r\n        method: method,\r\n        headers: {\r\n            // 默认设置为 JSON\r\n            'Content-Type': 'application/json',\r\n        }\r\n    };\r\n\r\n    // **按照您的要求，将 JWT 添加到 'token' 头**\r\n    if (token) {\r\n        config.headers['token'] = token;\r\n    }\r\n\r\n    if (data) {\r\n        // 特例：LoginController 需要 x-www-form-urlencoded\r\n        if (method === 'POST' && endpoint === '/login') {\r\n            config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\r\n            // 将 {username: 'a', password: 'b'} 转换为 \"username=a&password=b\"\r\n            config.body = new URLSearchParams(data).toString();\r\n        } \r\n        // 其他 POST/PUT 请求使用 JSON\r\n        else if (method === 'POST' || method === 'PUT') {\r\n            config.body = JSON.stringify(data);\r\n        }\r\n    }\r\n\r\n    try {\r\n        const response = await fetch(`${BASE_URL}${endpoint}`, config);\r\n        \r\n        // 解析后端的 Result 对象\r\n        const responseData = await response.json();\r\n\r\n        // 检查后端的业务逻辑是否成功\r\n        if (!response.ok || responseData.code === 0) {\r\n            throw new Error(responseData.msg || 'API 请求失败');\r\n        }\r\n\r\n        // 返回完整的 Result 对象\r\n        return responseData;\r\n\r\n    } catch (error) {\r\n        console.error('API Client Error:', error);\r\n        // 将错误抛出，以便组件可以捕获它\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport default apiClient;"],"mappings":";;;AAAA;AACA,SAASA,OAAO,QAAQ,cAAc;;AAEtC;AACA,MAAMC,QAAQ,GAAG,uBAAuB;;AAExC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeC,SAASA,CAACC,QAAQ,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,EAAE;EAC5D,MAAM;IAAEC;EAAS,CAAC,GAAGN,OAAO,CAAC,CAAC;EAC9B,MAAMO,KAAK,GAAGD,QAAQ,CAAC,CAAC;EAExB,MAAME,MAAM,GAAG;IACXJ,MAAM,EAAEA,MAAM;IACdK,OAAO,EAAE;MACL;MACA,cAAc,EAAE;IACpB;EACJ,CAAC;;EAED;EACA,IAAIF,KAAK,EAAE;IACPC,MAAM,CAACC,OAAO,CAAC,OAAO,CAAC,GAAGF,KAAK;EACnC;EAEA,IAAIF,IAAI,EAAE;IACN;IACA,IAAID,MAAM,KAAK,MAAM,IAAID,QAAQ,KAAK,QAAQ,EAAE;MAC5CK,MAAM,CAACC,OAAO,CAAC,cAAc,CAAC,GAAG,mCAAmC;MACpE;MACAD,MAAM,CAACE,IAAI,GAAG,IAAIC,eAAe,CAACN,IAAI,CAAC,CAACO,QAAQ,CAAC,CAAC;IACtD;IACA;IAAA,KACK,IAAIR,MAAM,KAAK,MAAM,IAAIA,MAAM,KAAK,KAAK,EAAE;MAC5CI,MAAM,CAACE,IAAI,GAAGG,IAAI,CAACC,SAAS,CAACT,IAAI,CAAC;IACtC;EACJ;EAEA,IAAI;IACA,MAAMU,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGf,QAAQ,GAAGE,QAAQ,EAAE,EAAEK,MAAM,CAAC;;IAE9D;IACA,MAAMS,YAAY,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;;IAE1C;IACA,IAAI,CAACH,QAAQ,CAACI,EAAE,IAAIF,YAAY,CAACG,IAAI,KAAK,CAAC,EAAE;MACzC,MAAM,IAAIC,KAAK,CAACJ,YAAY,CAACK,GAAG,IAAI,UAAU,CAAC;IACnD;;IAEA;IACA,OAAOL,YAAY;EAEvB,CAAC,CAAC,OAAOM,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IACzC;IACA,MAAMA,KAAK;EACf;AACJ;AAEA,eAAerB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}