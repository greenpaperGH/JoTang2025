{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref } from 'vue';\nimport { useRouter } from 'vue-router';\nimport apiClient from '../services/api';\nexport default {\n  __name: 'LoginView',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const username = ref('');\n    const password = ref('');\n    const errorMsg = ref('');\n    const router = useRouter();\n    const handleLogin = async () => {\n      try {\n        //\n        // 因为 LoginController.java 接受的是表单参数，而不是 JSON\n        // 我们需要使用 URLSearchParams 来构建 application/x-www-form-urlencoded\n        const params = new URLSearchParams();\n        params.append('username', username.value);\n        params.append('password', password.value);\n        const response = await apiClient.post('/login', params, {\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n          }\n        });\n        if (response.data.code === 1) {\n          // 登录成功\n          const jwtToken = response.data.data;\n          localStorage.setItem('jwt-token', jwtToken);\n          // 跳转到商品页\n          router.push('/products').then(() => window.location.reload());\n        } else {\n          // 登录失败\n          errorMsg.value = response.data.msg || '登录失败。';\n        }\n      } catch (error) {\n        console.error('登录异常:', error);\n        errorMsg.value = error.response?.data?.msg || '服务器连接失败。';\n      }\n    };\n    const __returned__ = {\n      username,\n      password,\n      errorMsg,\n      router,\n      handleLogin,\n      ref,\n      get useRouter() {\n        return useRouter;\n      },\n      get apiClient() {\n        return apiClient;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","useRouter","apiClient","username","password","errorMsg","router","handleLogin","params","URLSearchParams","append","value","response","post","headers","data","code","jwtToken","localStorage","setItem","push","then","window","location","reload","msg","error","console"],"sources":["G:/vue-project/jotang-frontend/src/views/LoginView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>登录</h2>\r\n    <form @submit.prevent=\"handleLogin\">\r\n      <div>\r\n        <label>用户名: </label>\r\n        <input v-model=\"username\" type=\"text\" required />\r\n      </div>\r\n      <div>\r\n        <label>密码: </label>\r\n        <input v-model=\"password\" type=\"password\" required />\r\n      </div>\r\n      <button type=\"submit\">登录</button>\r\n      <p v-if=\"errorMsg\" style=\"color: red\">{{ errorMsg }}</p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport apiClient from '../services/api';\r\n\r\nconst username = ref('');\r\nconst password = ref('');\r\nconst errorMsg = ref('');\r\nconst router = useRouter();\r\n\r\nconst handleLogin = async () => {\r\n  try {\r\n    //\r\n    // 因为 LoginController.java 接受的是表单参数，而不是 JSON\r\n    // 我们需要使用 URLSearchParams 来构建 application/x-www-form-urlencoded\r\n    const params = new URLSearchParams();\r\n    params.append('username', username.value);\r\n    params.append('password', password.value);\r\n\r\n    const response = await apiClient.post('/login', params, {\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded'\r\n      }\r\n    });\r\n\r\n    if (response.data.code === 1) {\r\n      // 登录成功\r\n      const jwtToken = response.data.data;\r\n      localStorage.setItem('jwt-token', jwtToken);\r\n      // 跳转到商品页\r\n      router.push('/products').then(() => window.location.reload());\r\n    } else {\r\n      // 登录失败\r\n      errorMsg.value = response.data.msg || '登录失败。';\r\n    }\r\n  } catch (error) {\r\n    console.error('登录异常:', error);\r\n    errorMsg.value = error.response?.data?.msg || '服务器连接失败。';\r\n  }\r\n};\r\n</script>"],"mappings":";;;;AAmBA,SAASA,GAAG,QAAQ,KAAK;AACzB,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,SAAS,MAAM,iBAAiB;;;;;;;IAEvC,MAAMC,QAAQ,GAAGH,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMI,QAAQ,GAAGJ,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMK,QAAQ,GAAGL,GAAG,CAAC,EAAE,CAAC;IACxB,MAAMM,MAAM,GAAGL,SAAS,CAAC,CAAC;IAE1B,MAAMM,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF;QACA;QACA;QACA,MAAMC,MAAM,GAAG,IAAIC,eAAe,CAAC,CAAC;QACpCD,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEP,QAAQ,CAACQ,KAAK,CAAC;QACzCH,MAAM,CAACE,MAAM,CAAC,UAAU,EAAEN,QAAQ,CAACO,KAAK,CAAC;QAEzC,MAAMC,QAAQ,GAAG,MAAMV,SAAS,CAACW,IAAI,CAAC,QAAQ,EAAEL,MAAM,EAAE;UACtDM,OAAO,EAAE;YACP,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;QAEF,IAAIF,QAAQ,CAACG,IAAI,CAACC,IAAI,KAAK,CAAC,EAAE;UAC5B;UACA,MAAMC,QAAQ,GAAGL,QAAQ,CAACG,IAAI,CAACA,IAAI;UACnCG,YAAY,CAACC,OAAO,CAAC,WAAW,EAAEF,QAAQ,CAAC;UAC3C;UACAX,MAAM,CAACc,IAAI,CAAC,WAAW,CAAC,CAACC,IAAI,CAAC,MAAMC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAAC;QAC/D,CAAC,MAAM;UACL;UACAnB,QAAQ,CAACM,KAAK,GAAGC,QAAQ,CAACG,IAAI,CAACU,GAAG,IAAI,OAAO;QAC/C;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;QAC7BrB,QAAQ,CAACM,KAAK,GAAGe,KAAK,CAACd,QAAQ,EAAEG,IAAI,EAAEU,GAAG,IAAI,UAAU;MAC1D;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}