{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, reactive, onMounted, computed } from 'vue';\nimport { useRouter } from 'vue-router';\nimport apiClient from '@/services/apiClient';\n\n// 从路由获取 props (在 router/index.js 中定义了 props: true)\n\nexport default {\n  __name: 'ProductForm',\n  props: {\n    id: {\n      type: String,\n      default: null\n    }\n  },\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const props = __props;\n    const router = useRouter();\n    const product = reactive({\n      id: null,\n      title: '',\n      description: '',\n      type: '',\n      price: 0.0,\n      status: 'available',\n      publisherId: null\n    });\n    const error = ref(null);\n\n    // 计算属性，判断当前是编辑模式还是新建模式\n    const isEditMode = computed(() => !!props.id);\n\n    // (GET /products/{id})\n    const loadProductData = async () => {\n      if (!isEditMode.value) return; // 如果是新建模式，则跳过加载\n      try {\n        const result = await apiClient(`/products/${props.id}`, 'GET');\n        if (result.code === 1) {\n          // 将获取到的数据填充到表单\n          Object.assign(product, result.data);\n        } else {\n          error.value = result.msg;\n        }\n      } catch (err) {\n        error.value = err.message;\n      }\n    };\n\n    // 提交表单 (POST /products 或 PUT /products)\n    const handleSubmit = async () => {\n      error.value = null;\n      try {\n        let result;\n        if (isEditMode.value) {\n          // 更新 (PUT)\n          result = await apiClient('/products', 'PUT', product);\n        } else {\n          // 创建 (POST)\n          result = await apiClient('/products', 'POST', product);\n        }\n        if (result.code === 1) {\n          router.push({\n            name: 'ProductList'\n          }); // 成功后返回列表页\n        } else {\n          error.value = result.msg;\n        }\n      } catch (err) {\n        error.value = err.message;\n      }\n    };\n\n    // 组件挂载时，如果是编辑模式，则加载商品数据\n    onMounted(loadProductData);\n    const __returned__ = {\n      props,\n      router,\n      product,\n      error,\n      isEditMode,\n      loadProductData,\n      handleSubmit,\n      ref,\n      reactive,\n      onMounted,\n      computed,\n      get useRouter() {\n        return useRouter;\n      },\n      get apiClient() {\n        return apiClient;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","computed","useRouter","apiClient","props","__props","router","product","id","title","description","type","price","status","publisherId","error","isEditMode","loadProductData","value","result","code","Object","assign","data","msg","err","message","handleSubmit","push","name"],"sources":["G:/vue-project/jotang-frontend/src/views/ProductForm.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2 v-if=\"isEditMode\">编辑商品</h2>\r\n    <h2 v-else>添加新商品</h2>\r\n    \r\n    <form @submit.prevent=\"handleSubmit\">\r\n      <div>\r\n        <label for=\"title\">标题:</label>\r\n        <input type=\"text\" v-model=\"product.title\" id=\"title\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"description\">描述:</label>\r\n        <textarea v-model=\"product.description\" id=\"description\"></textarea>\r\n      </div>\r\n      <div>\r\n        <label for=\"type\">类型:</label>\r\n        <input type=\"text\" v-model=\"product.type\" id=\"type\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"price\">价格:</label>\r\n        <input type=\"number\" step=\"0.01\" v-model.number=\"product.price\" id=\"price\" required>\r\n      </div>\r\n      <div>\r\n        <label for=\"status\">状态:</label>\r\n        <input type=\"text\" v-model=\"product.status\" id=\"status\" required>\r\n      </div>\r\n      <div v-if=\"!isEditMode\">\r\n        <label for=\"publisherId\">发布者 ID:</label>\r\n        <input type=\"number\" v-model.number=\"product.publisherId\" id=\"publisherId\" required>\r\n      </div>\r\n      \r\n      <button type=\"submit\">{{ isEditMode ? '更新' : '创建' }}</button>\r\n      <p v-if=\"error\" style=\"color: red;\">{{ error }}</p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, reactive, onMounted, computed, defineProps } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport apiClient from '@/services/apiClient';\r\n\r\n// 从路由获取 props (在 router/index.js 中定义了 props: true)\r\nconst props = defineProps({\r\n  id: {\r\n    type: String,\r\n    default: null\r\n  }\r\n});\r\n\r\nconst router = useRouter();\r\nconst product = reactive({\r\n  id: null,\r\n  title: '',\r\n  description: '',\r\n  type: '',\r\n  price: 0.0,\r\n  status: 'available',\r\n  publisherId: null \r\n});\r\nconst error = ref(null);\r\n\r\n// 计算属性，判断当前是编辑模式还是新建模式\r\nconst isEditMode = computed(() => !!props.id);\r\n\r\n// (GET /products/{id})\r\nconst loadProductData = async () => {\r\n  if (!isEditMode.value) return; // 如果是新建模式，则跳过加载\r\n  try {\r\n    const result = await apiClient(`/products/${props.id}`, 'GET');\r\n    if (result.code === 1) {\r\n      // 将获取到的数据填充到表单\r\n      Object.assign(product, result.data);\r\n    } else {\r\n      error.value = result.msg;\r\n    }\r\n  } catch (err) {\r\n    error.value = err.message;\r\n  }\r\n};\r\n\r\n// 提交表单 (POST /products 或 PUT /products)\r\nconst handleSubmit = async () => {\r\n  error.value = null;\r\n  try {\r\n    let result;\r\n    if (isEditMode.value) {\r\n      // 更新 (PUT)\r\n      result = await apiClient('/products', 'PUT', product);\r\n    } else {\r\n      // 创建 (POST)\r\n      result = await apiClient('/products', 'POST', product);\r\n    }\r\n\r\n    if (result.code === 1) {\r\n      router.push({ name: 'ProductList' }); // 成功后返回列表页\r\n    } else {\r\n      error.value = result.msg;\r\n    }\r\n  } catch (err) {\r\n    error.value = err.message;\r\n  }\r\n};\r\n\r\n// 组件挂载时，如果是编辑模式，则加载商品数据\r\nonMounted(loadProductData);\r\n</script>"],"mappings":";AAsCA,SAASA,GAAG,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,QAAqB,QAAQ,KAAK;AACrE,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,SAAS,MAAM,sBAAsB;;AAE5C;;;;;;;;;;;;;;IACA,MAAMC,KAAK,GAAGC,OAKZ;IAEF,MAAMC,MAAM,GAAGJ,SAAS,CAAC,CAAC;IAC1B,MAAMK,OAAO,GAAGR,QAAQ,CAAC;MACvBS,EAAE,EAAE,IAAI;MACRC,KAAK,EAAE,EAAE;MACTC,WAAW,EAAE,EAAE;MACfC,IAAI,EAAE,EAAE;MACRC,KAAK,EAAE,GAAG;MACVC,MAAM,EAAE,WAAW;MACnBC,WAAW,EAAE;IACf,CAAC,CAAC;IACF,MAAMC,KAAK,GAAGjB,GAAG,CAAC,IAAI,CAAC;;IAEvB;IACA,MAAMkB,UAAU,GAAGf,QAAQ,CAAC,MAAM,CAAC,CAACG,KAAK,CAACI,EAAE,CAAC;;IAE7C;IACA,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI,CAACD,UAAU,CAACE,KAAK,EAAE,OAAO,CAAC;MAC/B,IAAI;QACF,MAAMC,MAAM,GAAG,MAAMhB,SAAS,CAAC,aAAaC,KAAK,CAACI,EAAE,EAAE,EAAE,KAAK,CAAC;QAC9D,IAAIW,MAAM,CAACC,IAAI,KAAK,CAAC,EAAE;UACrB;UACAC,MAAM,CAACC,MAAM,CAACf,OAAO,EAAEY,MAAM,CAACI,IAAI,CAAC;QACrC,CAAC,MAAM;UACLR,KAAK,CAACG,KAAK,GAAGC,MAAM,CAACK,GAAG;QAC1B;MACF,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZV,KAAK,CAACG,KAAK,GAAGO,GAAG,CAACC,OAAO;MAC3B;IACF,CAAC;;IAED;IACA,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/BZ,KAAK,CAACG,KAAK,GAAG,IAAI;MAClB,IAAI;QACF,IAAIC,MAAM;QACV,IAAIH,UAAU,CAACE,KAAK,EAAE;UACpB;UACAC,MAAM,GAAG,MAAMhB,SAAS,CAAC,WAAW,EAAE,KAAK,EAAEI,OAAO,CAAC;QACvD,CAAC,MAAM;UACL;UACAY,MAAM,GAAG,MAAMhB,SAAS,CAAC,WAAW,EAAE,MAAM,EAAEI,OAAO,CAAC;QACxD;QAEA,IAAIY,MAAM,CAACC,IAAI,KAAK,CAAC,EAAE;UACrBd,MAAM,CAACsB,IAAI,CAAC;YAAEC,IAAI,EAAE;UAAc,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC,MAAM;UACLd,KAAK,CAACG,KAAK,GAAGC,MAAM,CAACK,GAAG;QAC1B;MACF,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZV,KAAK,CAACG,KAAK,GAAGO,GAAG,CAACC,OAAO;MAC3B;IACF,CAAC;;IAED;IACA1B,SAAS,CAACiB,eAAe,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}