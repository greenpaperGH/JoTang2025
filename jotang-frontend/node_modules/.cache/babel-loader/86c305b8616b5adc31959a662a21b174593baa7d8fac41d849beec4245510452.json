{"ast":null,"code":"import { reactive, ref } from 'vue';\nconst baseURL = 'http://localhost:8080';\n\n//\n\nexport default {\n  __name: 'ProductOrder',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const order = reactive({\n      productId: null,\n      buyerId: null,\n      // 实际应用中 buyerId 应从当前登录用户获取\n      status: 'pending'\n    });\n    const successMsg = ref('');\n    const errorMsg = ref('');\n\n    // 帮助函数：获取认证头\n    const getAuthHeaders = () => {\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const token = localStorage.getItem('jwt-token');\n      if (token) {\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      return headers;\n    };\n\n    // POST /product-orders\n    const createOrder = async () => {\n      try {\n        successMsg.value = '';\n        errorMsg.value = '';\n\n        //\n        // ProductOrderController 使用了 @RequestBody\n        const response = await fetch(`${baseURL}/product-orders`, {\n          method: 'POST',\n          headers: getAuthHeaders(),\n          body: JSON.stringify(order) //\n        });\n        if (!response.ok) throw new Error('网络响应失败');\n        const result = await response.json(); //\n\n        if (result.code === 1) {\n          successMsg.value = '订单创建成功！';\n          Object.assign(order, {\n            productId: null,\n            buyerId: null,\n            status: 'pending'\n          });\n        } else {\n          errorMsg.value = result.msg || '订单创建失败。';\n        }\n      } catch (error) {\n        console.error('创建订单异常:', error);\n        errorMsg.value = '服务器错误。';\n      }\n    };\n    const __returned__ = {\n      baseURL,\n      order,\n      successMsg,\n      errorMsg,\n      getAuthHeaders,\n      createOrder,\n      reactive,\n      ref\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["reactive","ref","baseURL","order","productId","buyerId","status","successMsg","errorMsg","getAuthHeaders","headers","token","localStorage","getItem","createOrder","value","response","fetch","method","body","JSON","stringify","ok","Error","result","json","code","Object","assign","msg","error","console"],"sources":["G:/vue-project/jotang-frontend/src/views/ProductOrder.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>创建订单</h2>\r\n    <form @submit.prevent=\"createOrder\">\r\n      <div>\r\n        <label>商品ID: </label>\r\n        <input v-model.number=\"order.productId\" type=\"number\" required />\r\n      </div>\r\n      <div>\r\n        <label>购买者ID: </label>\r\n        <input v-model.number=\"order.buyerId\" type=\"number\" required />\r\n      </div>\r\n      <div>\r\n        <label>状态: </label>\r\n        <input v-model=\"order.status\" type=\"text\" placeholder=\"e.g., pending\" required/>\r\n      </div>\r\n      <button type=\"submit\">提交订单</button>\r\n      <p v-if=\"successMsg\" style=\"color: green\">{{ successMsg }}</p>\r\n      <p v-if=\"errorMsg\" style=\"color: red\">{{ errorMsg }}</p>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { reactive, ref } from 'vue';\r\n\r\nconst baseURL = 'http://localhost:8080';\r\n\r\n//\r\nconst order = reactive({\r\n  productId: null,\r\n  buyerId: null, // 实际应用中 buyerId 应从当前登录用户获取\r\n  status: 'pending'\r\n});\r\n\r\nconst successMsg = ref('');\r\nconst errorMsg = ref('');\r\n\r\n// 帮助函数：获取认证头\r\nconst getAuthHeaders = () => {\r\n  const headers = {\r\n    'Content-Type': 'application/json'\r\n  };\r\n  const token = localStorage.getItem('jwt-token');\r\n  if (token) {\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n  return headers;\r\n};\r\n\r\n// POST /product-orders\r\nconst createOrder = async () => {\r\n  try {\r\n    successMsg.value = '';\r\n    errorMsg.value = '';\r\n    \r\n    //\r\n    // ProductOrderController 使用了 @RequestBody\r\n    const response = await fetch(`${baseURL}/product-orders`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(order) //\r\n    });\r\n\r\n    if (!response.ok) throw new Error('网络响应失败');\r\n\r\n    const result = await response.json(); //\r\n\r\n    if (result.code === 1) {\r\n      successMsg.value = '订单创建成功！';\r\n      Object.assign(order, { productId: null, buyerId: null, status: 'pending' });\r\n    } else {\r\n      errorMsg.value = result.msg || '订单创建失败。';\r\n    }\r\n  } catch (error) {\r\n    console.error('创建订单异常:', error);\r\n    errorMsg.value = '服务器错误。';\r\n  }\r\n};\r\n</script>"],"mappings":"AAwBA,SAASA,QAAQ,EAAEC,GAAG,QAAQ,KAAK;AAEnC,MAAMC,OAAO,GAAG,uBAAuB;;AAEvC;;;;;;;;IACA,MAAMC,KAAK,GAAGH,QAAQ,CAAC;MACrBI,SAAS,EAAE,IAAI;MACfC,OAAO,EAAE,IAAI;MAAE;MACfC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMC,UAAU,GAAGN,GAAG,CAAC,EAAE,CAAC;IAC1B,MAAMO,QAAQ,GAAGP,GAAG,CAAC,EAAE,CAAC;;IAExB;IACA,MAAMQ,cAAc,GAAGA,CAAA,KAAM;MAC3B,MAAMC,OAAO,GAAG;QACd,cAAc,EAAE;MAClB,CAAC;MACD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;MAC/C,IAAIF,KAAK,EAAE;QACTD,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUC,KAAK,EAAE;MAC9C;MACA,OAAOD,OAAO;IAChB,CAAC;;IAED;IACA,MAAMI,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACFP,UAAU,CAACQ,KAAK,GAAG,EAAE;QACrBP,QAAQ,CAACO,KAAK,GAAG,EAAE;;QAEnB;QACA;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGf,OAAO,iBAAiB,EAAE;UACxDgB,MAAM,EAAE,MAAM;UACdR,OAAO,EAAED,cAAc,CAAC,CAAC;UACzBU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAClB,KAAK,CAAC,CAAC;QAC9B,CAAC,CAAC;QAEF,IAAI,CAACa,QAAQ,CAACM,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,QAAQ,CAAC;QAE3C,MAAMC,MAAM,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC,CAAC,CAAC;;QAEtC,IAAID,MAAM,CAACE,IAAI,KAAK,CAAC,EAAE;UACrBnB,UAAU,CAACQ,KAAK,GAAG,SAAS;UAC5BY,MAAM,CAACC,MAAM,CAACzB,KAAK,EAAE;YAAEC,SAAS,EAAE,IAAI;YAAEC,OAAO,EAAE,IAAI;YAAEC,MAAM,EAAE;UAAU,CAAC,CAAC;QAC7E,CAAC,MAAM;UACLE,QAAQ,CAACO,KAAK,GAAGS,MAAM,CAACK,GAAG,IAAI,SAAS;QAC1C;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAAC;QAC/BtB,QAAQ,CAACO,KAAK,GAAG,QAAQ;MAC3B;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}