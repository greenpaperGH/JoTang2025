{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport { ref, onMounted, reactive } from 'vue';\nconst baseURL = 'http://localhost:8080';\n\n// 响应式对象\n\nexport default {\n  __name: 'ProductList',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const products = ref([]); //\n    const errorMsg = ref('');\n    const newProduct = reactive({\n      title: '',\n      description: '',\n      type: '',\n      price: 0.0,\n      status: 'available',\n      publisherId: 1 // 假设\n    });\n    const searchParams = reactive({\n      type: '',\n      minPrice: null,\n      maxPrice: null,\n      startTime: '',\n      endTime: ''\n    });\n\n    // --- 帮助函数：获取认证头 ---\n    // 因为没有 axios 拦截器，我们必须在每次请求时手动添加 Token\n    const getAuthHeaders = () => {\n      const headers = {\n        'Content-Type': 'application/json'\n      };\n      const token = localStorage.getItem('jwt-token');\n      if (token) {\n        // 假设后端需要 'Bearer ' 前缀\n        headers['Authorization'] = `Bearer ${token}`;\n      }\n      return headers;\n    };\n\n    // --- API 调用 ---\n\n    // GET /products\n    const fetchAllProducts = async () => {\n      try {\n        errorMsg.value = '';\n        const response = await fetch(`${baseURL}/products`, {\n          method: 'GET',\n          headers: getAuthHeaders() // GET 请求也需要认证\n        });\n        if (!response.ok) throw new Error('网络响应失败');\n        const result = await response.json(); //\n        if (result.code === 1) {\n          products.value = result.data;\n        } else {\n          errorMsg.value = result.msg;\n        }\n      } catch (err) {\n        errorMsg.value = '获取商品列表失败。';\n        console.error(err);\n      }\n    };\n\n    // GET /products/by-condition\n    const searchProducts = async () => {\n      try {\n        errorMsg.value = '';\n\n        // 使用 URLSearchParams 构建查询字符串\n        const params = new URLSearchParams();\n        for (const key in searchParams) {\n          if (searchParams[key] !== null && searchParams[key] !== '') {\n            params.append(key, searchParams[key]);\n          }\n        }\n        const queryString = params.toString();\n        const response = await fetch(`${baseURL}/products/by-condition?${queryString}`, {\n          method: 'GET',\n          headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error('网络响应失败');\n        const result = await response.json(); //\n        if (result.code === 1) {\n          products.value = result.data;\n        } else {\n          errorMsg.value = result.msg;\n        }\n      } catch (err) {\n        errorMsg.value = '查询商品失败。';\n        console.error(err);\n      }\n    };\n\n    // POST /products\n    const createProduct = async () => {\n      try {\n        errorMsg.value = '';\n        const response = await fetch(`${baseURL}/products`, {\n          method: 'POST',\n          headers: getAuthHeaders(),\n          body: JSON.stringify(newProduct) //\n        });\n        if (!response.ok) throw new Error('网络响应失败');\n        const result = await response.json(); //\n        if (result.code === 1) {\n          alert('创建成功！');\n          Object.assign(newProduct, {\n            title: '',\n            description: '',\n            type: '',\n            price: 0.0,\n            status: 'available'\n          });\n          await fetchAllProducts();\n        } else {\n          errorMsg.value = result.msg;\n        }\n      } catch (err) {\n        errorMsg.value = '创建商品失败。';\n        console.error(err);\n      }\n    };\n\n    // DELETE /products/{id}\n    const deleteProduct = async id => {\n      if (!confirm(`确定要删除 ID 为 ${id} 的商品吗？`)) {\n        return;\n      }\n      try {\n        errorMsg.value = '';\n        const response = await fetch(`${baseURL}/products/${id}`, {\n          method: 'DELETE',\n          headers: getAuthHeaders()\n        });\n        if (!response.ok) throw new Error('网络响应失败');\n        const result = await response.json(); //\n        if (result.code === 1) {\n          alert('删除成功！');\n          await fetchAllProducts();\n        } else {\n          errorMsg.value = result.msg;\n        }\n      } catch (err) {\n        errorMsg.value = '删除商品失败。';\n        console.error(err);\n      }\n    };\n    onMounted(fetchAllProducts);\n    const __returned__ = {\n      products,\n      errorMsg,\n      baseURL,\n      newProduct,\n      searchParams,\n      getAuthHeaders,\n      fetchAllProducts,\n      searchProducts,\n      createProduct,\n      deleteProduct,\n      ref,\n      onMounted,\n      reactive\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","reactive","baseURL","products","errorMsg","newProduct","title","description","type","price","status","publisherId","searchParams","minPrice","maxPrice","startTime","endTime","getAuthHeaders","headers","token","localStorage","getItem","fetchAllProducts","value","response","fetch","method","ok","Error","result","json","code","data","msg","err","console","error","searchProducts","params","URLSearchParams","key","append","queryString","toString","createProduct","body","JSON","stringify","alert","Object","assign","deleteProduct","id","confirm"],"sources":["G:/vue-project/jotang-frontend/src/views/ProductList.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <h2>商品管理</h2>\r\n\r\n    <fieldset>\r\n      <legend>新增商品</legend>\r\n      <form @submit.prevent=\"createProduct\">\r\n        <input v-model=\"newProduct.title\" placeholder=\"标题\" required />\r\n        <input v-model=\"newProduct.description\" placeholder=\"描述\" />\r\n        <input v-model=\"newProduct.type\" placeholder=\"类型\" />\r\n        <input v-model.number=\"newProduct.price\" type=\"number\" placeholder=\"价格\" />\r\n        <input v-model=\"newProduct.status\" placeholder=\"状态 (e.g., available)\" />\r\n        <button type=\"submit\">创建</button>\r\n      </form>\r\n    </fieldset>\r\n\r\n    <fieldset>\r\n      <legend>查询商品</legend>\r\n      <form @submit.prevent=\"searchProducts\">\r\n        <input v-model=\"searchParams.type\" placeholder=\"类型\" />\r\n        <input v-model.number=\"searchParams.minPrice\" type=\"number\" placeholder=\"最低价\" />\r\n        <input v-model.number=\"searchParams.maxPrice\" type=\"number\" placeholder=\"最高价\" />\r\n        <input v-model=\"searchParams.startTime\" type=\"date\" placeholder=\"开始时间\" />\r\n        <input v-model=\"searchParams.endTime\" type=\"date\" placeholder=\"结束时间\" />\r\n        <button type=\"submit\">搜索</button>\r\n        <button type=\"button\" @click=\"fetchAllProducts\">清空并查询所有</button>\r\n      </form>\r\n    </fieldset>\r\n    \r\n    <h3>商品列表</h3>\r\n    <table border=\"1\" style=\"width: 100%\">\r\n      <thead>\r\n        <tr>\r\n          <th>ID</th>\r\n          <th>标题</th>\r\n          <th>类型</th>\r\n          <th>价格</th>\r\n          <th>状态</th>\r\n          <th>发布时间</th>\r\n          <th>操作</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr v-if=\"products.length === 0\">\r\n          <td colspan=\"7\">暂无数据</td>\r\n        </tr>\r\n        <tr v-for=\"product in products\" :key=\"product.id\">\r\n          <td>{{ product.id }}</td>\r\n          <td>{{ product.title }}</td>\r\n          <td>{{ product.type }}</td>\r\n          <td>{{ product.price }}</td>\r\n          <td>{{ product.status }}</td>\r\n          <td>{{ product.publishTime }}</td>\r\n          <td>\r\n            <button @click=\"deleteProduct(product.id)\">\r\n              删除\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      </tbody>\r\n    </table>\r\n    <p v-if=\"errorMsg\" style=\"color: red\">{{ errorMsg }}</p>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, onMounted, reactive } from 'vue';\r\n\r\nconst products = ref([]); //\r\nconst errorMsg = ref('');\r\nconst baseURL = 'http://localhost:8080';\r\n\r\n// 响应式对象\r\nconst newProduct = reactive({\r\n  title: '',\r\n  description: '',\r\n  type: '',\r\n  price: 0.0,\r\n  status: 'available',\r\n  publisherId: 1 // 假设\r\n});\r\n\r\nconst searchParams = reactive({\r\n  type: '',\r\n  minPrice: null,\r\n  maxPrice: null,\r\n  startTime: '',\r\n  endTime: ''\r\n});\r\n\r\n// --- 帮助函数：获取认证头 ---\r\n// 因为没有 axios 拦截器，我们必须在每次请求时手动添加 Token\r\nconst getAuthHeaders = () => {\r\n  const headers = {\r\n    'Content-Type': 'application/json'\r\n  };\r\n  const token = localStorage.getItem('jwt-token');\r\n  if (token) {\r\n    // 假设后端需要 'Bearer ' 前缀\r\n    headers['Authorization'] = `Bearer ${token}`;\r\n  }\r\n  return headers;\r\n};\r\n\r\n// --- API 调用 ---\r\n\r\n// GET /products\r\nconst fetchAllProducts = async () => {\r\n  try {\r\n    errorMsg.value = '';\r\n    const response = await fetch(`${baseURL}/products`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders() // GET 请求也需要认证\r\n    });\r\n    if (!response.ok) throw new Error('网络响应失败');\r\n    \r\n    const result = await response.json(); //\r\n    if (result.code === 1) {\r\n      products.value = result.data;\r\n    } else {\r\n      errorMsg.value = result.msg;\r\n    }\r\n  } catch (err) {\r\n    errorMsg.value = '获取商品列表失败。';\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// GET /products/by-condition\r\nconst searchProducts = async () => {\r\n  try {\r\n    errorMsg.value = '';\r\n    \r\n    // 使用 URLSearchParams 构建查询字符串\r\n    const params = new URLSearchParams();\r\n    for (const key in searchParams) {\r\n      if (searchParams[key] !== null && searchParams[key] !== '') {\r\n        params.append(key, searchParams[key]);\r\n      }\r\n    }\r\n    const queryString = params.toString();\r\n    \r\n    const response = await fetch(`${baseURL}/products/by-condition?${queryString}`, {\r\n      method: 'GET',\r\n      headers: getAuthHeaders()\r\n    });\r\n\r\n    if (!response.ok) throw new Error('网络响应失败');\r\n    \r\n    const result = await response.json(); //\r\n    if (result.code === 1) {\r\n      products.value = result.data;\r\n    } else {\r\n      errorMsg.value = result.msg;\r\n    }\r\n  } catch (err) {\r\n    errorMsg.value = '查询商品失败。';\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// POST /products\r\nconst createProduct = async () => {\r\n  try {\r\n    errorMsg.value = '';\r\n    const response = await fetch(`${baseURL}/products`, {\r\n      method: 'POST',\r\n      headers: getAuthHeaders(),\r\n      body: JSON.stringify(newProduct) //\r\n    });\r\n    \r\n    if (!response.ok) throw new Error('网络响应失败');\r\n\r\n    const result = await response.json(); //\r\n    if (result.code === 1) {\r\n      alert('创建成功！');\r\n      Object.assign(newProduct, { title: '', description: '', type: '', price: 0.0, status: 'available' });\r\n      await fetchAllProducts();\r\n    } else {\r\n      errorMsg.value = result.msg;\r\n    }\r\n  } catch (err) {\r\n    errorMsg.value = '创建商品失败。';\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// DELETE /products/{id}\r\nconst deleteProduct = async (id) => {\r\n  if (!confirm(`确定要删除 ID 为 ${id} 的商品吗？`)) {\r\n    return;\r\n  }\r\n  try {\r\n    errorMsg.value = '';\r\n    const response = await fetch(`${baseURL}/products/${id}`, {\r\n      method: 'DELETE',\r\n      headers: getAuthHeaders()\r\n    });\r\n\r\n    if (!response.ok) throw new Error('网络响应失败');\r\n    \r\n    const result = await response.json(); //\r\n    if (result.code === 1) {\r\n      alert('删除成功！');\r\n      await fetchAllProducts();\r\n    } else {\r\n      errorMsg.value = result.msg;\r\n    }\r\n  } catch (err) {\r\n    errorMsg.value = '删除商品失败。';\r\n    console.error(err);\r\n  }\r\n};\r\n\r\nonMounted(fetchAllProducts);\r\n</script>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}